// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  avatarUrl String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  assignedTasks Task[]
  projectMembers ProjectMember[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String?
  progress    Int      @default(0)
  dueDate     DateTime @map("due_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tasks      Task[]
  members    ProjectMember[]

  @@map("projects")
}

model Task {
  id          String   @id @default(uuid())
  projectId   String   @map("project_id")
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?  @map("due_date")
  assigneeId  String?    @map("assignee_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  subtasks    Subtask[]

  @@map("tasks")
}

model ProjectMember {
  projectId  String      @map("project_id")
  userId     String      @map("user_id")
  role       ProjectRole @default(MEMBER)
  createdAt  DateTime    @default(now()) @map("created_at")

  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_members")
}

model Subtask {
  id          String     @id @default(uuid())
  taskId      String     @map("task_id")
  title       String
  description String?
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}
